version: '2.1'

services:
 
 web:
  restart: always
  build: ./web/
  expose:
    - "8000"
  links:
    - postgres:postgres
    - redis:redis
  env_file: env
  working_dir: /data/web/mydjango
  volumes:
    - ./web:/data/web
  command: sh -c '/usr/bin/python3 manage.py makemigrations && /usr/bin/python3 manage.py migrate && /usr/bin/python3 eventmanager.py & /usr/bin/gunicorn mydjango.wsgi:application -w 2 -b :8000'
  depends_on:
   - redis
   - postgres
  
 nginx:
  restart: always
  build: ./nginx/
  ports:
    - "8099:80"
  volumes_from:
    - web
  links:
    - web:web

 postgres:
  restart: always
  image: postgres:latest
  volumes_from:
    - data
  volumes:
    - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    - ./backups/postgresql:/backup
  env_file:
    - env
  expose:
    - "5432"

 php-redis-admin:
  image: faktiva/php-redis-admin
  container_name: pra
  environment:
   - PHPREDMIN_DATABASE_REDIS_0_HOST=redis
  ports:
   - "8093:80"
  depends_on:
   - redis
    
 redis:
  restart: always
  image: redis:latest
  expose:
    - "6379"
  volumes:
   - ./redis:/data
 data:
  restart: always
  image: alpine
  volumes:
    - /var/lib/postgresql
  command: "true"


 logreader-tel:
  container_name: logreader-tel
  build: ./logreader
  volumes:
   - './logreader:/usr/src/app'
   - '/media/callcenter/DIAGS:/media/callcenter/DIAGS/'
  environment:
   - LOGFILE=TelephonyServer_ccrcsl02.000
  depends_on:
   - redis

 logreader-agent:
  container_name: logreader-agent
  build: ./logreader
  volumes:
   - './logreader:/usr/src/app'
   - '/media/callcenter/DIAGS:/media/callcenter/DIAGS/'
  environment:
   - LOGFILE=PresenceServer_ccrcsl02.000
  depends_on:
   - redis
   
 ot-ws:
  container_name: ot-ws
  build: ./ot_ws
  volumes:
   - './ot_ws:/usr/src/app'
  environment:
   - OT_WS_URL=http://otrcsl01.rcsl.lu/otws/v1.asmx
   - APP_SETTINGS=ot_ws.config.DevelopmentConfig
  ports:
   - 5001:5000 # expose ports - HOST:CONTAINER
      
 swagger:
  container_name: swagger
  build: ./swagger
  ports:
   - '5100:8080' # expose ports - HOST:CONTAINER
  environment:
   - API_URL=http://148.110.107.15:5001/api/ot/events/schema
  depends_on:
   ot-ws:
    condition: service_started